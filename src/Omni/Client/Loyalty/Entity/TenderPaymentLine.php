<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 */


namespace Ls\Omni\Client\Loyalty\Entity;

use \Ls\Omni\Client\Loyalty\Entity\Enum\TenderType;
use \Ls\Omni\Exception\InvalidEnumException;

class TenderPaymentLine
{

    /**
     * @property float $Amount
     */
    protected $Amount = null;

    /**
     * @property string $CardOrCustNumber
     */
    protected $CardOrCustNumber = null;

    /**
     * @property string $CardType
     */
    protected $CardType = null;

    /**
     * @property string $CurrencyCode
     */
    protected $CurrencyCode = null;

    /**
     * @property string $EFTAuthCode
     */
    protected $EFTAuthCode = null;

    /**
     * @property string $EFTCaptureCode
     */
    protected $EFTCaptureCode = null;

    /**
     * @property string $EFTCardName
     */
    protected $EFTCardName = null;

    /**
     * @property string $EFTCardNumber
     */
    protected $EFTCardNumber = null;

    /**
     * @property string $EFTMessage
     */
    protected $EFTMessage = null;

    /**
     * @property string $EFTToken
     */
    protected $EFTToken = null;

    /**
     * @property string $Id
     */
    protected $Id = null;

    /**
     * @property int $LineNumber
     */
    protected $LineNumber = null;

    /**
     * @property float $Points
     */
    protected $Points = null;

    /**
     * @property TenderType $Type
     */
    protected $Type = null;

    /**
     * @param float $Amount
     * @return $this
     */
    public function setAmount($Amount)
    {
        $this->Amount = $Amount;
        return $this;
    }

    /**
     * @return float
     */
    public function getAmount()
    {
        return $this->Amount;
    }

    /**
     * @param string $CardOrCustNumber
     * @return $this
     */
    public function setCardOrCustNumber($CardOrCustNumber)
    {
        $this->CardOrCustNumber = $CardOrCustNumber;
        return $this;
    }

    /**
     * @return string
     */
    public function getCardOrCustNumber()
    {
        return $this->CardOrCustNumber;
    }

    /**
     * @param string $CardType
     * @return $this
     */
    public function setCardType($CardType)
    {
        $this->CardType = $CardType;
        return $this;
    }

    /**
     * @return string
     */
    public function getCardType()
    {
        return $this->CardType;
    }

    /**
     * @param string $CurrencyCode
     * @return $this
     */
    public function setCurrencyCode($CurrencyCode)
    {
        $this->CurrencyCode = $CurrencyCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->CurrencyCode;
    }

    /**
     * @param string $EFTAuthCode
     * @return $this
     */
    public function setEFTAuthCode($EFTAuthCode)
    {
        $this->EFTAuthCode = $EFTAuthCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTAuthCode()
    {
        return $this->EFTAuthCode;
    }

    /**
     * @param string $EFTCaptureCode
     * @return $this
     */
    public function setEFTCaptureCode($EFTCaptureCode)
    {
        $this->EFTCaptureCode = $EFTCaptureCode;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTCaptureCode()
    {
        return $this->EFTCaptureCode;
    }

    /**
     * @param string $EFTCardName
     * @return $this
     */
    public function setEFTCardName($EFTCardName)
    {
        $this->EFTCardName = $EFTCardName;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTCardName()
    {
        return $this->EFTCardName;
    }

    /**
     * @param string $EFTCardNumber
     * @return $this
     */
    public function setEFTCardNumber($EFTCardNumber)
    {
        $this->EFTCardNumber = $EFTCardNumber;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTCardNumber()
    {
        return $this->EFTCardNumber;
    }

    /**
     * @param string $EFTMessage
     * @return $this
     */
    public function setEFTMessage($EFTMessage)
    {
        $this->EFTMessage = $EFTMessage;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTMessage()
    {
        return $this->EFTMessage;
    }

    /**
     * @param string $EFTToken
     * @return $this
     */
    public function setEFTToken($EFTToken)
    {
        $this->EFTToken = $EFTToken;
        return $this;
    }

    /**
     * @return string
     */
    public function getEFTToken()
    {
        return $this->EFTToken;
    }

    /**
     * @param string $Id
     * @return $this
     */
    public function setId($Id)
    {
        $this->Id = $Id;
        return $this;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->Id;
    }

    /**
     * @param int $LineNumber
     * @return $this
     */
    public function setLineNumber($LineNumber)
    {
        $this->LineNumber = $LineNumber;
        return $this;
    }

    /**
     * @return int
     */
    public function getLineNumber()
    {
        return $this->LineNumber;
    }

    /**
     * @param float $Points
     * @return $this
     */
    public function setPoints($Points)
    {
        $this->Points = $Points;
        return $this;
    }

    /**
     * @return float
     */
    public function getPoints()
    {
        return $this->Points;
    }

    /**
     * @param TenderType|string $Type
     * @return $this
     * @throws InvalidEnumException
     */
    public function setType($Type)
    {
        if ( ! $Type instanceof TenderType ) {
            if ( TenderType::isValid( $Type ) ) 
                $Type = new TenderType( $Type );
            elseif ( TenderType::isValidKey( $Type ) ) 
                $Type = new TenderType( constant( "TenderType::$Type" ) );
            elseif ( ! $Type instanceof TenderType )
                throw new InvalidEnumException();
        }
        $this->Type = $Type->getValue();

        return $this;
    }

    /**
     * @return TenderType
     */
    public function getType()
    {
        return $this->Type;
    }


}

