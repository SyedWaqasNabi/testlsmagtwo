<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 */


namespace Ls\Omni\Client\Loyalty\Entity;

use \Ls\Omni\Client\Loyalty\Entity\Enum\ItemNumberType;
use \Ls\Omni\Exception\InvalidEnumException;
use \Ls\Omni\Client\Loyalty\Entity\Enum\SourceType;

class OrderAvailabilityRequest
{

    /**
     * @property string $CardId
     */
    protected $CardId = null;

    /**
     * @property string $Id
     */
    protected $Id = null;

    /**
     * @property ItemNumberType $ItemNumberType
     */
    protected $ItemNumberType = null;

    /**
     * @property ArrayOfOrderLineAvailability $OrderLineAvailabilityRequests
     */
    protected $OrderLineAvailabilityRequests = null;

    /**
     * @property SourceType $SourceType
     */
    protected $SourceType = null;

    /**
     * @property string $StoreId
     */
    protected $StoreId = null;

    /**
     * @param string $CardId
     * @return $this
     */
    public function setCardId($CardId)
    {
        $this->CardId = $CardId;
        return $this;
    }

    /**
     * @return string
     */
    public function getCardId()
    {
        return $this->CardId;
    }

    /**
     * @param string $Id
     * @return $this
     */
    public function setId($Id)
    {
        $this->Id = $Id;
        return $this;
    }

    /**
     * @return string
     */
    public function getId()
    {
        return $this->Id;
    }

    /**
     * @param ItemNumberType|string $ItemNumberType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setItemNumberType($ItemNumberType)
    {
        if ( ! $ItemNumberType instanceof ItemNumberType ) {
            if ( ItemNumberType::isValid( $ItemNumberType ) ) 
                $ItemNumberType = new ItemNumberType( $ItemNumberType );
            elseif ( ItemNumberType::isValidKey( $ItemNumberType ) ) 
                $ItemNumberType = new ItemNumberType( constant( "ItemNumberType::$ItemNumberType" ) );
            elseif ( ! $ItemNumberType instanceof ItemNumberType )
                throw new InvalidEnumException();
        }
        $this->ItemNumberType = $ItemNumberType->getValue();

        return $this;
    }

    /**
     * @return ItemNumberType
     */
    public function getItemNumberType()
    {
        return $this->ItemNumberType;
    }

    /**
     * @param ArrayOfOrderLineAvailability $OrderLineAvailabilityRequests
     * @return $this
     */
    public function setOrderLineAvailabilityRequests($OrderLineAvailabilityRequests)
    {
        $this->OrderLineAvailabilityRequests = $OrderLineAvailabilityRequests;
        return $this;
    }

    /**
     * @return ArrayOfOrderLineAvailability
     */
    public function getOrderLineAvailabilityRequests()
    {
        return $this->OrderLineAvailabilityRequests;
    }

    /**
     * @param SourceType|string $SourceType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setSourceType($SourceType)
    {
        if ( ! $SourceType instanceof SourceType ) {
            if ( SourceType::isValid( $SourceType ) ) 
                $SourceType = new SourceType( $SourceType );
            elseif ( SourceType::isValidKey( $SourceType ) ) 
                $SourceType = new SourceType( constant( "SourceType::$SourceType" ) );
            elseif ( ! $SourceType instanceof SourceType )
                throw new InvalidEnumException();
        }
        $this->SourceType = $SourceType->getValue();

        return $this;
    }

    /**
     * @return SourceType
     */
    public function getSourceType()
    {
        return $this->SourceType;
    }

    /**
     * @param string $StoreId
     * @return $this
     */
    public function setStoreId($StoreId)
    {
        $this->StoreId = $StoreId;
        return $this;
    }

    /**
     * @return string
     */
    public function getStoreId()
    {
        return $this->StoreId;
    }


}

