<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 */


namespace Ls\Omni\Client\Loyalty\Entity;

use \Ls\Omni\Client\Loyalty\Entity\Enum\ActivityLogSolution;
use \Ls\Omni\Exception\InvalidEnumException;
use \Ls\Omni\Client\Loyalty\Entity\Enum\ActivityLogType;

class ActivityLog
{

    /**
     * @property string $ContactId
     */
    protected $ContactId = null;

    /**
     * @property ActivityLogSolution $LogSolution
     */
    protected $LogSolution = null;

    /**
     * @property ActivityLogType $LogType
     */
    protected $LogType = null;

    /**
     * @property string $Value
     */
    protected $Value = null;

    /**
     * @param string $ContactId
     * @return $this
     */
    public function setContactId($ContactId)
    {
        $this->ContactId = $ContactId;
        return $this;
    }

    /**
     * @return string
     */
    public function getContactId()
    {
        return $this->ContactId;
    }

    /**
     * @param ActivityLogSolution|string $LogSolution
     * @return $this
     * @throws InvalidEnumException
     */
    public function setLogSolution($LogSolution)
    {
        if ( ! $LogSolution instanceof ActivityLogSolution ) {
            if ( ActivityLogSolution::isValid( $LogSolution ) ) 
                $LogSolution = new ActivityLogSolution( $LogSolution );
            elseif ( ActivityLogSolution::isValidKey( $LogSolution ) ) 
                $LogSolution = new ActivityLogSolution( constant( "ActivityLogSolution::$LogSolution" ) );
            elseif ( ! $LogSolution instanceof ActivityLogSolution )
                throw new InvalidEnumException();
        }
        $this->LogSolution = $LogSolution->getValue();

        return $this;
    }

    /**
     * @return ActivityLogSolution
     */
    public function getLogSolution()
    {
        return $this->LogSolution;
    }

    /**
     * @param ActivityLogType|string $LogType
     * @return $this
     * @throws InvalidEnumException
     */
    public function setLogType($LogType)
    {
        if ( ! $LogType instanceof ActivityLogType ) {
            if ( ActivityLogType::isValid( $LogType ) ) 
                $LogType = new ActivityLogType( $LogType );
            elseif ( ActivityLogType::isValidKey( $LogType ) ) 
                $LogType = new ActivityLogType( constant( "ActivityLogType::$LogType" ) );
            elseif ( ! $LogType instanceof ActivityLogType )
                throw new InvalidEnumException();
        }
        $this->LogType = $LogType->getValue();

        return $this;
    }

    /**
     * @return ActivityLogType
     */
    public function getLogType()
    {
        return $this->LogType;
    }

    /**
     * @param string $Value
     * @return $this
     */
    public function setValue($Value)
    {
        $this->Value = $Value;
        return $this;
    }

    /**
     * @return string
     */
    public function getValue()
    {
        return $this->Value;
    }


}

