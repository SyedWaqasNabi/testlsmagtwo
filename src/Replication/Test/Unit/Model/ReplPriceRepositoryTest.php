<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Replication\Test\Unit\Model;

use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Api\SearchCriteriaInterface;
use Exception;
use Magento\Framework\Phrase;
use Magento\Framework\Api\SortOrder;
use PHPUnit\Framework\TestCase;
use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
use \Ls\Replication\Model\ReplPriceRepository;
use \Ls\Replication\Model\ResourceModel\ReplPrice\Collection;
use \Ls\Replication\Model\ResourceModel\ReplPrice\CollectionFactory;
use \Ls\Replication\Api\ReplPriceRepositoryInterface;
use \Ls\Replication\Api\Data\ReplPriceInterface;
use \Ls\Replication\Api\Data\ReplPriceSearchResultsInterface;
use \Ls\Replication\Model\ReplPriceFactory;
use \Ls\Replication\Model\ReplPriceSearchResultsFactory;

class ReplPriceRepositoryTest extends TestCase
{

    /**
     * @property ReplPriceFactory $objectFactory
     */
    protected $objectFactory = null;

    /**
     * @property CollectionFactory $collectionFactory
     */
    protected $collectionFactory = null;

    /**
     * @property ReplPriceSearchResultsFactory $resultFactory
     */
    protected $resultFactory = null;

    /**
     * @property ReplPriceRepository $model
     */
    private $model = null;

    /**
     * @property ReplPriceInterface $entityInterface
     */
    private $entityInterface = null;

    /**
     * @property ReplPriceSearchResultsInterface $entitySearchResultsInterface
     */
    private $entitySearchResultsInterface = null;

    public function setUp()
    {
        $this->objectFactory = $this->createPartialMock(ReplPriceFactory::class, ['create']);
        $this->collectionFactory = $this->createMock(CollectionFactory::class);
        $this->resultFactory = $this->createMock(ReplPriceSearchResultsFactory::class);
        $this->entityInterface = $this->createMock(ReplPriceInterface::class);
        $this->entitySearchResultsInterface = $this->createMock(ReplPriceSearchResultsInterface::class);
        $this->model = new ReplPriceRepository(
                $this->objectFactory,
                $this->collectionFactory,
                $this->resultFactory
        );
    }

    public function testGet()
    {
        $entityId = 1;
        $entityMock = $this->createMock(ReplPriceRepository::class);
        $entityMock->method('getById')->willReturn(
            $entityId
        );
        $this->assertEquals($entityId, $entityMock->getById($entityId));
    }


}

