<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Replication\Test\Unit\Model;

use Magento\Framework\Exception\CouldNotDeleteException;
use Magento\Framework\Exception\CouldNotSaveException;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Api\SearchCriteriaInterface;
use Exception;
use Magento\Framework\Phrase;
use Magento\Framework\Api\SortOrder;
use PHPUnit\Framework\TestCase;
use Magento\Framework\TestFramework\Unit\Helper\ObjectManager;
use \Ls\Replication\Model\ReplItemCategoryRepository;
use \Ls\Replication\Model\ResourceModel\ReplItemCategory\Collection;
use \Ls\Replication\Model\ResourceModel\ReplItemCategory\CollectionFactory;
use \Ls\Replication\Api\ReplItemCategoryRepositoryInterface;
use \Ls\Replication\Api\Data\ReplItemCategoryInterface;
use \Ls\Replication\Api\Data\ReplItemCategorySearchResultsInterface;
use \Ls\Replication\Model\ReplItemCategoryFactory;
use \Ls\Replication\Model\ReplItemCategorySearchResultsFactory;

class ReplItemCategoryRepositoryTest extends TestCase
{

    /**
     * @property ReplItemCategoryFactory $objectFactory
     */
    protected $objectFactory = null;

    /**
     * @property CollectionFactory $collectionFactory
     */
    protected $collectionFactory = null;

    /**
     * @property ReplItemCategorySearchResultsFactory $resultFactory
     */
    protected $resultFactory = null;

    /**
     * @property ReplItemCategoryRepository $model
     */
    private $model = null;

    /**
     * @property ReplItemCategoryInterface $entityInterface
     */
    private $entityInterface = null;

    /**
     * @property ReplItemCategorySearchResultsInterface $entitySearchResultsInterface
     */
    private $entitySearchResultsInterface = null;

    public function setUp()
    {
        $this->objectFactory = $this->createPartialMock(ReplItemCategoryFactory::class, ['create']);
        $this->collectionFactory = $this->createMock(CollectionFactory::class);
        $this->resultFactory = $this->createMock(ReplItemCategorySearchResultsFactory::class);
        $this->entityInterface = $this->createMock(ReplItemCategoryInterface::class);
        $this->entitySearchResultsInterface = $this->createMock(ReplItemCategorySearchResultsInterface::class);
        $this->model = new ReplItemCategoryRepository(
                $this->objectFactory,
                $this->collectionFactory,
                $this->resultFactory
        );
    }

    public function testGet()
    {
        $entityId = 1;
        $entityMock = $this->createMock(ReplItemCategoryRepository::class);
        $entityMock->method('getById')->willReturn(
            $entityId
        );
        $this->assertEquals($entityId, $entityMock->getById($entityId));
    }


}

