<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Replication\Setup\UpgradeSchema;

use Magento\Framework\Setup\SchemaSetupInterface;
use Magento\Framework\Setup\ModuleContextInterface;
use Magento\Framework\DB\Ddl\Table;

class ReplItem
{

    public function upgrade(SchemaSetupInterface $setup, ModuleContextInterface $context)
    {
        $table_name = $setup->getTable( 'ls_replication_repl_item' ); 
        if(!$setup->tableExists($table_name)) {
        	$table = $setup->getConnection()->newTable( $table_name );
        	$table->addColumn('repl_item_id', Table::TYPE_INTEGER, NULL, 
        	                    [ 'identity' => TRUE, 'primary' => TRUE,
        	                      'unsigned' => TRUE, 'nullable' => FALSE, 'auto_increment'=> TRUE ]);
        	$table->addColumn('scope', Table::TYPE_TEXT, 8);
        	$table->addColumn('scope_id', Table::TYPE_INTEGER, 11);
        	$table->addColumn('processed', Table::TYPE_BOOLEAN, null, [ 'default' => 0 ], 'Flag to check if data is already copied into Magento. 0 means needs to be copied into Magento tables & 1 means already copied');
        	$table->addColumn('is_updated', Table::TYPE_BOOLEAN, null, [ 'default' => 0 ], 'Flag to check if data is already updated from Omni into Magento. 0 means already updated & 1 means needs to be updated into Magento tables');
        	$table->addColumn('BaseUnitOfMeasure' , Table::TYPE_TEXT, '');
        	$table->addColumn('BlockDiscount' , Table::TYPE_INTEGER, '');
        	$table->addColumn('BlockDistribution' , Table::TYPE_INTEGER, '');
        	$table->addColumn('BlockManualPriceChange' , Table::TYPE_INTEGER, '');
        	$table->addColumn('BlockNegativeAdjustment' , Table::TYPE_INTEGER, '');
        	$table->addColumn('BlockPositiveAdjustment' , Table::TYPE_INTEGER, '');
        	$table->addColumn('BlockPurchaseReturn' , Table::TYPE_INTEGER, '');
        	$table->addColumn('Blocked' , Table::TYPE_INTEGER, '');
        	$table->addColumn('BlockedOnPos' , Table::TYPE_INTEGER, '');
        	$table->addColumn('CrossSellingExists' , Table::TYPE_INTEGER, '');
        	$table->addColumn('DateBlocked' , Table::TYPE_TEXT, '');
        	$table->addColumn('DateToActivateItem' , Table::TYPE_TEXT, '');
        	$table->addColumn('Description' , Table::TYPE_TEXT, '');
        	$table->addColumn('Details' , Table::TYPE_TEXT, '');
        	$table->addColumn('GrossWeight' , Table::TYPE_FLOAT, '');
        	$table->addColumn('nav_id' , Table::TYPE_TEXT, '');
        	$table->addColumn('IsDeleted' , Table::TYPE_BOOLEAN, '');
        	$table->addColumn('ItemCategoryCode' , Table::TYPE_TEXT, '');
        	$table->addColumn('ItemFamilyCode' , Table::TYPE_TEXT, '');
        	$table->addColumn('KeyingInPrice' , Table::TYPE_INTEGER, '');
        	$table->addColumn('KeyingInQty' , Table::TYPE_INTEGER, '');
        	$table->addColumn('MustKeyInComment' , Table::TYPE_INTEGER, '');
        	$table->addColumn('NoDiscountAllowed' , Table::TYPE_INTEGER, '');
        	$table->addColumn('ProductGroupId' , Table::TYPE_TEXT, '');
        	$table->addColumn('PurchUnitOfMeasure' , Table::TYPE_TEXT, '');
        	$table->addColumn('SalseUnitOfMeasure' , Table::TYPE_TEXT, '');
        	$table->addColumn('ScaleItem' , Table::TYPE_INTEGER, '');
        	$table->addColumn('SeasonCode' , Table::TYPE_TEXT, '');
        	$table->addColumn('TaxItemGroupId' , Table::TYPE_TEXT, '');
        	$table->addColumn('UnitPrice' , Table::TYPE_FLOAT, '');
        	$table->addColumn('UnitVolume' , Table::TYPE_FLOAT, '');
        	$table->addColumn('UnitsPerParcel' , Table::TYPE_FLOAT, '');
        	$table->addColumn('VendorId' , Table::TYPE_TEXT, '');
        	$table->addColumn('VendorItemId' , Table::TYPE_TEXT, '');
        	$table->addColumn('ZeroPriceValId' , Table::TYPE_INTEGER, '');
        	$table->addColumn('created_at', Table::TYPE_TIMESTAMP, null, [ 'nullable' => false, 'default' => Table::TIMESTAMP_INIT ], 'Created At');
        	$table->addColumn('updated_at', Table::TYPE_TIMESTAMP, null, [ 'nullable' => false, 'default' => Table::TIMESTAMP_INIT_UPDATE ], 'Updated At');
        	$setup->getConnection()->createTable( $table );
        } else {
        	$connection = $setup->getConnection();
        	if ($connection->tableColumnExists($table_name, 'BaseUnitOfMeasure' ) === false) {
        		$connection->addColumn($table_name, 'BaseUnitOfMeasure', ['type' => Table::TYPE_TEXT, 'comment' => 'BaseUnitOfMeasure']);
        	}
        	if ($connection->tableColumnExists($table_name, 'BlockDiscount' ) === false) {
        		$connection->addColumn($table_name, 'BlockDiscount', ['type' => Table::TYPE_INTEGER, 'comment' => 'BlockDiscount']);
        	}
        	if ($connection->tableColumnExists($table_name, 'BlockDistribution' ) === false) {
        		$connection->addColumn($table_name, 'BlockDistribution', ['type' => Table::TYPE_INTEGER, 'comment' => 'BlockDistribution']);
        	}
        	if ($connection->tableColumnExists($table_name, 'BlockManualPriceChange' ) === false) {
        		$connection->addColumn($table_name, 'BlockManualPriceChange', ['type' => Table::TYPE_INTEGER, 'comment' => 'BlockManualPriceChange']);
        	}
        	if ($connection->tableColumnExists($table_name, 'BlockNegativeAdjustment' ) === false) {
        		$connection->addColumn($table_name, 'BlockNegativeAdjustment', ['type' => Table::TYPE_INTEGER, 'comment' => 'BlockNegativeAdjustment']);
        	}
        	if ($connection->tableColumnExists($table_name, 'BlockPositiveAdjustment' ) === false) {
        		$connection->addColumn($table_name, 'BlockPositiveAdjustment', ['type' => Table::TYPE_INTEGER, 'comment' => 'BlockPositiveAdjustment']);
        	}
        	if ($connection->tableColumnExists($table_name, 'BlockPurchaseReturn' ) === false) {
        		$connection->addColumn($table_name, 'BlockPurchaseReturn', ['type' => Table::TYPE_INTEGER, 'comment' => 'BlockPurchaseReturn']);
        	}
        	if ($connection->tableColumnExists($table_name, 'Blocked' ) === false) {
        		$connection->addColumn($table_name, 'Blocked', ['type' => Table::TYPE_INTEGER, 'comment' => 'Blocked']);
        	}
        	if ($connection->tableColumnExists($table_name, 'BlockedOnPos' ) === false) {
        		$connection->addColumn($table_name, 'BlockedOnPos', ['type' => Table::TYPE_INTEGER, 'comment' => 'BlockedOnPos']);
        	}
        	if ($connection->tableColumnExists($table_name, 'CrossSellingExists' ) === false) {
        		$connection->addColumn($table_name, 'CrossSellingExists', ['type' => Table::TYPE_INTEGER, 'comment' => 'CrossSellingExists']);
        	}
        	if ($connection->tableColumnExists($table_name, 'DateBlocked' ) === false) {
        		$connection->addColumn($table_name, 'DateBlocked', ['type' => Table::TYPE_TEXT, 'comment' => 'DateBlocked']);
        	}
        	if ($connection->tableColumnExists($table_name, 'DateToActivateItem' ) === false) {
        		$connection->addColumn($table_name, 'DateToActivateItem', ['type' => Table::TYPE_TEXT, 'comment' => 'DateToActivateItem']);
        	}
        	if ($connection->tableColumnExists($table_name, 'Description' ) === false) {
        		$connection->addColumn($table_name, 'Description', ['type' => Table::TYPE_TEXT, 'comment' => 'Description']);
        	}
        	if ($connection->tableColumnExists($table_name, 'Details' ) === false) {
        		$connection->addColumn($table_name, 'Details', ['type' => Table::TYPE_TEXT, 'comment' => 'Details']);
        	}
        	if ($connection->tableColumnExists($table_name, 'GrossWeight' ) === false) {
        		$connection->addColumn($table_name, 'GrossWeight', ['type' => Table::TYPE_FLOAT, 'comment' => 'GrossWeight']);
        	}
        	if ($connection->tableColumnExists($table_name, 'nav_id' ) === false) {
        		$connection->addColumn($table_name, 'nav_id', ['type' => Table::TYPE_TEXT, 'comment' => 'Nav_id']);
        	}
        	if ($connection->tableColumnExists($table_name, 'IsDeleted' ) === false) {
        		$connection->addColumn($table_name, 'IsDeleted', ['type' => Table::TYPE_BOOLEAN, 'comment' => 'IsDeleted']);
        	}
        	if ($connection->tableColumnExists($table_name, 'ItemCategoryCode' ) === false) {
        		$connection->addColumn($table_name, 'ItemCategoryCode', ['type' => Table::TYPE_TEXT, 'comment' => 'ItemCategoryCode']);
        	}
        	if ($connection->tableColumnExists($table_name, 'ItemFamilyCode' ) === false) {
        		$connection->addColumn($table_name, 'ItemFamilyCode', ['type' => Table::TYPE_TEXT, 'comment' => 'ItemFamilyCode']);
        	}
        	if ($connection->tableColumnExists($table_name, 'KeyingInPrice' ) === false) {
        		$connection->addColumn($table_name, 'KeyingInPrice', ['type' => Table::TYPE_INTEGER, 'comment' => 'KeyingInPrice']);
        	}
        	if ($connection->tableColumnExists($table_name, 'KeyingInQty' ) === false) {
        		$connection->addColumn($table_name, 'KeyingInQty', ['type' => Table::TYPE_INTEGER, 'comment' => 'KeyingInQty']);
        	}
        	if ($connection->tableColumnExists($table_name, 'MustKeyInComment' ) === false) {
        		$connection->addColumn($table_name, 'MustKeyInComment', ['type' => Table::TYPE_INTEGER, 'comment' => 'MustKeyInComment']);
        	}
        	if ($connection->tableColumnExists($table_name, 'NoDiscountAllowed' ) === false) {
        		$connection->addColumn($table_name, 'NoDiscountAllowed', ['type' => Table::TYPE_INTEGER, 'comment' => 'NoDiscountAllowed']);
        	}
        	if ($connection->tableColumnExists($table_name, 'ProductGroupId' ) === false) {
        		$connection->addColumn($table_name, 'ProductGroupId', ['type' => Table::TYPE_TEXT, 'comment' => 'ProductGroupId']);
        	}
        	if ($connection->tableColumnExists($table_name, 'PurchUnitOfMeasure' ) === false) {
        		$connection->addColumn($table_name, 'PurchUnitOfMeasure', ['type' => Table::TYPE_TEXT, 'comment' => 'PurchUnitOfMeasure']);
        	}
        	if ($connection->tableColumnExists($table_name, 'SalseUnitOfMeasure' ) === false) {
        		$connection->addColumn($table_name, 'SalseUnitOfMeasure', ['type' => Table::TYPE_TEXT, 'comment' => 'SalseUnitOfMeasure']);
        	}
        	if ($connection->tableColumnExists($table_name, 'ScaleItem' ) === false) {
        		$connection->addColumn($table_name, 'ScaleItem', ['type' => Table::TYPE_INTEGER, 'comment' => 'ScaleItem']);
        	}
        	if ($connection->tableColumnExists($table_name, 'SeasonCode' ) === false) {
        		$connection->addColumn($table_name, 'SeasonCode', ['type' => Table::TYPE_TEXT, 'comment' => 'SeasonCode']);
        	}
        	if ($connection->tableColumnExists($table_name, 'TaxItemGroupId' ) === false) {
        		$connection->addColumn($table_name, 'TaxItemGroupId', ['type' => Table::TYPE_TEXT, 'comment' => 'TaxItemGroupId']);
        	}
        	if ($connection->tableColumnExists($table_name, 'UnitPrice' ) === false) {
        		$connection->addColumn($table_name, 'UnitPrice', ['type' => Table::TYPE_FLOAT, 'comment' => 'UnitPrice']);
        	}
        	if ($connection->tableColumnExists($table_name, 'UnitVolume' ) === false) {
        		$connection->addColumn($table_name, 'UnitVolume', ['type' => Table::TYPE_FLOAT, 'comment' => 'UnitVolume']);
        	}
        	if ($connection->tableColumnExists($table_name, 'UnitsPerParcel' ) === false) {
        		$connection->addColumn($table_name, 'UnitsPerParcel', ['type' => Table::TYPE_FLOAT, 'comment' => 'UnitsPerParcel']);
        	}
        	if ($connection->tableColumnExists($table_name, 'VendorId' ) === false) {
        		$connection->addColumn($table_name, 'VendorId', ['type' => Table::TYPE_TEXT, 'comment' => 'VendorId']);
        	}
        	if ($connection->tableColumnExists($table_name, 'VendorItemId' ) === false) {
        		$connection->addColumn($table_name, 'VendorItemId', ['type' => Table::TYPE_TEXT, 'comment' => 'VendorItemId']);
        	}
        	if ($connection->tableColumnExists($table_name, 'ZeroPriceValId' ) === false) {
        		$connection->addColumn($table_name, 'ZeroPriceValId', ['type' => Table::TYPE_INTEGER, 'comment' => 'ZeroPriceValId']);
        	}
        }
    }


}

