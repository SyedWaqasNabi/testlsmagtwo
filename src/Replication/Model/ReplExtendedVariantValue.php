<?php
/**
 * THIS IS AN AUTOGENERATED FILE
 * DO NOT MODIFY
 * @codingStandardsIgnoreFile
 */


namespace Ls\Replication\Model;

use Magento\Framework\Model\AbstractModel;
use Magento\Framework\DataObject\IdentityInterface;
use Ls\Replication\Api\Data\ReplExtendedVariantValueInterface;

class ReplExtendedVariantValue extends AbstractModel implements ReplExtendedVariantValueInterface, IdentityInterface
{

    const CACHE_TAG = 'ls_replication_repl_extended_variant_value';

    protected $_cacheTag = 'ls_replication_repl_extended_variant_value';

    protected $_eventPrefix = 'ls_replication_repl_extended_variant_value';

    /**
     * @property string $Code
     */
    protected $Code = null;

    /**
     * @property string $Dimensions
     */
    protected $Dimensions = null;

    /**
     * @property string $FrameworkCode
     */
    protected $FrameworkCode = null;

    /**
     * @property boolean $IsDeleted
     */
    protected $IsDeleted = null;

    /**
     * @property string $ItemId
     */
    protected $ItemId = null;

    /**
     * @property int $LogicalOrder
     */
    protected $LogicalOrder = null;

    /**
     * @property string $Timestamp
     */
    protected $Timestamp = null;

    /**
     * @property string $Value
     */
    protected $Value = null;

    /**
     * @property string $scope
     */
    protected $scope = null;

    /**
     * @property int $scope_id
     */
    protected $scope_id = null;

    /**
     * @property string $processed
     */
    protected $processed = null;

    /**
     * @property string $is_updated
     */
    protected $is_updated = null;

    public function _construct()
    {
        $this->_init( 'Ls\Replication\Model\ResourceModel\ReplExtendedVariantValue' );
    }

    public function getIdentities()
    {
        return [ self::CACHE_TAG . '_' . $this->getId() ];
    }

    /**
     * @param string $Code
     * @return $this
     */
    public function setCode($Code)
    {
        $this->setData( 'Code', $Code );
        $this->Code = $Code;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getCode()
    {
        return $this->getData( 'Code' );
    }

    /**
     * @param string $Dimensions
     * @return $this
     */
    public function setDimensions($Dimensions)
    {
        $this->setData( 'Dimensions', $Dimensions );
        $this->Dimensions = $Dimensions;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getDimensions()
    {
        return $this->getData( 'Dimensions' );
    }

    /**
     * @param string $FrameworkCode
     * @return $this
     */
    public function setFrameworkCode($FrameworkCode)
    {
        $this->setData( 'FrameworkCode', $FrameworkCode );
        $this->FrameworkCode = $FrameworkCode;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getFrameworkCode()
    {
        return $this->getData( 'FrameworkCode' );
    }

    /**
     * @param boolean $IsDeleted
     * @return $this
     */
    public function setIsDeleted($IsDeleted)
    {
        $this->setData( 'IsDeleted', $IsDeleted );
        $this->IsDeleted = $IsDeleted;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return boolean
     */
    public function getIsDeleted()
    {
        return $this->getData( 'IsDeleted' );
    }

    /**
     * @param string $ItemId
     * @return $this
     */
    public function setItemId($ItemId)
    {
        $this->setData( 'ItemId', $ItemId );
        $this->ItemId = $ItemId;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getItemId()
    {
        return $this->getData( 'ItemId' );
    }

    /**
     * @param int $LogicalOrder
     * @return $this
     */
    public function setLogicalOrder($LogicalOrder)
    {
        $this->setData( 'LogicalOrder', $LogicalOrder );
        $this->LogicalOrder = $LogicalOrder;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return int
     */
    public function getLogicalOrder()
    {
        return $this->getData( 'LogicalOrder' );
    }

    /**
     * @param string $Timestamp
     * @return $this
     */
    public function setTimestamp($Timestamp)
    {
        $this->setData( 'Timestamp', $Timestamp );
        $this->Timestamp = $Timestamp;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getTimestamp()
    {
        return $this->getData( 'Timestamp' );
    }

    /**
     * @param string $Value
     * @return $this
     */
    public function setValue($Value)
    {
        $this->setData( 'Value', $Value );
        $this->Value = $Value;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getValue()
    {
        return $this->getData( 'Value' );
    }

    /**
     * @param string $scope
     * @return $this
     */
    public function setScope($scope)
    {
        $this->setData( 'scope', $scope );
        $this->scope = $scope;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getScope()
    {
        return $this->getData( 'scope' );
    }

    /**
     * @param int $scope_id
     * @return $this
     */
    public function setScopeId($scope_id)
    {
        $this->setData( 'scope_id', $scope_id );
        $this->scope_id = $scope_id;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return int
     */
    public function getScopeId()
    {
        return $this->getData( 'scope_id' );
    }

    /**
     * @param string $processed
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->setData( 'processed', $processed );
        $this->processed = $processed;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getProcessed()
    {
        return $this->getData( 'processed' );
    }

    /**
     * @param string $is_updated
     * @return $this
     */
    public function setIsUpdated($is_updated)
    {
        $this->setData( 'is_updated', $is_updated );
        $this->is_updated = $is_updated;
        $this->setDataChanges( TRUE );
        return $this;
    }

    /**
     * @return string
     */
    public function getIsUpdated()
    {
        return $this->getData( 'is_updated' );
    }


}

